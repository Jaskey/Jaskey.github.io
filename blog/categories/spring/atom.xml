<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring | 薛定谔的风口猪]]></title>
  <link href="http://Jaskey.github.io/blog/categories/spring/atom.xml" rel="self"/>
  <link href="http://Jaskey.github.io/"/>
  <updated>2016-03-21T19:39:51+08:00</updated>
  <id>http://Jaskey.github.io/</id>
  <author>
    <name><![CDATA[Jaskey Lam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过VM参数指定本地log4j配置文件,Spring Boot]]></title>
    <link href="http://Jaskey.github.io/blog/2016/03/21/log4j-via-vm-arguments-spring-boot/"/>
    <updated>2016-03-21T19:20:09+08:00</updated>
    <id>http://Jaskey.github.io/blog/2016/03/21/log4j-via-vm-arguments-spring-boot</id>
    <content type="html"><![CDATA[<p><code>Spring Boot</code>有预设的日志配置逻辑（具体参看：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html#boot-features-custom-log-configuration">这里</a>）, 如果是log4j的话，以下文件会被加载：</p>

<p><code>log4j-spring.properties</code>, <code>log4j-spring.xml</code>, <code>log4j.properties</code> , <code>log4j.xml</code></p>

<p>有时候我们项目的log4j配置文件配置的是生产环境，每次本地调试又不想改会本地的调试配置，若希望通过VM参数去修改此文件，按照之前的参数<code>-Dlog4j.configuration</code>(非Spring Boot项目请看这里<a href="http://jaskey.github.io/blog/2014/11/30/log4j-configuration-via-jvm-argument/">通过VM参数选择本地log4j配置文件</a>)，在Spring Boot的项目中并不生效。</p>

<p>若需要指定另外的文件，需要用Spring Boot指定的配置：<code>-Dlogging.config</code>如</p>

<pre><code>-Dlogging.config=D:\project\git_repo\prome-data\src\main\resources\log4j-debug.properties
</code></pre>

<p>即可在本地运行时选择本地的配置文件进行日志配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从属性文件为变量赋值，Spring]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/30/inject-propeties-values/"/>
    <updated>2014-11-30T03:38:56+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/30/inject-propeties-values</id>
    <content type="html"><![CDATA[<p>有时候，我们需要从一些属性文件为变量赋值，这样修改变量值就不需要修改代码，直接修改属性文件就可以了。这样方便管理和维护。</p>

<p>Spring可以很轻松地通过Annotation的方式注入属性值，以下记录下学习的过程。</p>

<h2>配置</h2>

<p><strong>1. 新建属性文件</strong></p>

<p>如<code>application.properties</code></p>

<p>里面的格式为： <code>name=value</code></p>

<p>如：</p>

<pre><code>token=wodinow
</code></pre>

<p><strong>2. 配置属性文件路径</strong></p>

<pre><code>&lt;context:property-placeholder location="classpath:application.properties" /&gt;
</code></pre>

<hr />

<h2>使用注解注入</h2>

<p>在一个Bean中， 使用@Value注解使用${name}格式，如在@Controller中</p>

<pre><code>@Controller
public class CoreController {   

    @Value("${developer_id}")
    private String developerID;

    }
</code></pre>

<h2>为静态变量注入</h2>

<p>Spring不能为静态变量注入属性值，但我们可以配置一个setter完成此项工作，如：</p>

<pre><code>@Component
public class SignUtil {  

    //需要从属性文件中读值的静态变量
    private static  String TOKEN;  

    //配置一个setter, 为该静态变量赋值
    @Value("${token}")
    private void setTOKEN(String token) {
        SignUtil.TOKEN = token;
    }  
｝
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么在Spring Controller里面返回404]]></title>
    <link href="http://Jaskey.github.io/blog/2014/09/27/how-to-return-404-in-spring-controller/"/>
    <updated>2014-09-27T18:02:48+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/09/27/how-to-return-404-in-spring-controller</id>
    <content type="html"><![CDATA[<p>由于大多的客户端和服务端是独立的（可能用不同语言编写），客户端无法获知服务端的异常，所以普通的异常处理并不足以提示客户端。而基于HTTP协议的服务，我们则需要按照服务端的异常而返回特定的状态码给客户端。</p>

<p>以返回404状态码为例，在Spring 的Controller里面我们可以有以下3种方式处理：</p>

<ol>
<li><h2>自定义异常+@ResponseStatus注解：</h2>

<pre><code> //定义一个自定义异常，抛出时返回状态码404
 @ResponseStatus(value = HttpStatus.NOT_FOUND)
 public class ResourceNotFoundException extends RuntimeException {
     ...
 }

 //在Controller里面直接抛出这个异常
 @Controller
 public class SomeController {
     @RequestMapping(value="/video/{id}",method=RequestMethod.GET)
     public @ResponseBody Video getVidoeById(@PathVariable long id){
         if (isFound()) {
             // 做该做的逻辑
         }
         else {
             throw new ResourceNotFoundException();//把这个异常抛出 
         }
     }
 }
</code></pre></li>
<li><h2>使用Spring的内置异常</h2>

<p>默认情况下，Spring 的<code>DispatcherServlet</code>注册了<code>DefaultHandlerExceptionResolver</code>,这个resolver会处理标准的Spring MVC异常来表示特定的状态码</p>

<pre><code>  Exception                                   HTTP Status Code
  ConversionNotSupportedException             500 (Internal Server Error)
  HttpMediaTypeNotAcceptableException         406 (Not Acceptable)
  HttpMediaTypeNotSupportedException          415 (Unsupported Media Type)
  HttpMessageNotReadableException             400 (Bad Request)
  HttpMessageNotWritableException             500 (Internal Server Error)
  HttpRequestMethodNotSupportedException      405 (Method Not Allowed)
  MissingServletRequestParameterException     400 (Bad Request)
  NoSuchRequestHandlingMethodException        404 (Not Found)
  TypeMismatchException                       400 (Bad Request)
</code></pre></li>
<li><h2>在Controller方法中通过HttpServletResponse参数直接设值</h2>

<pre><code> //任何一个RequestMapping 的函数都可以接受一个HttpServletResponse类型的参数
 @Controller
 public class SomeController {
     @RequestMapping(value="/video/{id}",method=RequestMethod.GET)
     public @ResponseBody Video getVidoeById(@PathVariable long id ,HttpServletResponse response){
         if (isFound()) {
             // 做该做的逻辑
         }
         else {
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);//设置状态码
         }
         return ....
     }
 }
</code></pre></li>
</ol>


<p>更多详情：
<a href="http://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/mvc.html#mvc-exceptionhandlers" title="spring doc">Spring MVC 文档</a></p>
]]></content>
  </entry>
  
</feed>
