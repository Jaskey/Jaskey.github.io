<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | StackOverGiant]]></title>
  <link href="http://Jaskey.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://Jaskey.github.io/"/>
  <updated>2014-11-06T22:19:17+08:00</updated>
  <id>http://Jaskey.github.io/</id>
  <author>
    <name><![CDATA[Jaskey Lam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈性能瓶颈及简单调优]]></title>
    <link href="http://Jaskey.github.io/blog/2014/10/31/program-tunning/"/>
    <updated>2014-10-31T17:44:25+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/10/31/program-tunning</id>
    <content type="html"><![CDATA[<p>随着系统访问量的上升，系统资源的消耗，系统的响应通常会越来越慢。这时候我们需要对系统的性能进行相关分析，找到性能瓶颈。</p>

<p>从代码的角度来看，性能瓶颈很可能出现在几个关键资源:CPU,内存，IO。</p>

<h2>CPU</h2>

<p>由于每个CPU的每个核一个时间只能执行一个线程，Linux采用的是抢占式的调度。</p>

<h4>上下文切换</h4>

<p>如果有频繁的上下文切换，则会造成内核占据较多的CPU使用，降低系统性能。典型的例子有是有非常强烈的锁竞争情况。这会导致当前进程频繁的进入阻塞或者休眠状态，使得应用响应下降。</p>

<p>这类型的解决方法有，</p>

<ol>
<li>减小Thread的数量</li>
<li>降低锁竞争，如分多把锁。</li>
</ol>


<h4>线程一直处于Running</h4>

<p>还有另外一种情况是线程一直处于Running状态，这会导致该线程消耗大部分的CPU，通常情况是进行循环，或者大批量计算。</p>

<p>例如</p>

<pre><code>while(somevalue!=XXX){//
   ;//死循环
}   
</code></pre>

<p>或者有一个大批量的数据操作，如对集合进行很大数据量的增加操作：</p>

<pre><code>for(int i=0;i&lt;10000;i++){
    list.add(value[i])
}
</code></pre>

<p>以上两种例子都会使得线程一直处于running状态而不释放CPU，一个可取的方法是进行部分操作后进行<code>Thread.sleep()</code>,让出CPU。</p>

<p>如上面第二个例子：</p>

<pre><code>for(int i=0;i&lt;10000;i++){
   list.add(value[i])
   if(i%50==0){//每50个就让出一次CPU 
        Thread.sleep(1);
    }
}
</code></pre>

<p>当然，对于第一个例子，假如是希望线程中的协作的话，最好使用的是monitor object 的wait()/notify()之类的方法。</p>

<p>如</p>

<pre><code>while(!some_condition){
    condition.wait();//挂起等待notify
}
</code></pre>

<h2>内存</h2>

<p>如果消耗了过多的JVM Heap内存，将会频繁触发GC，将大大影响系统的性能。</p>

<h4>使用对象缓存池</h4>

<p>使用对象池可以一定程度创建对象所花费的CPU和内存</p>

<h4>采用合理的缓存失效算法</h4>

<p>上面讲到了对象池降低内存消耗，但假如放入太多对象到缓存池里面，反而会造成更严重的内存消耗，这是因为池本身对于对象持有引用，从而可能造成频繁的Full GC。所以，需要控制池中对象的数量。</p>

<p>当池中对象达到最大值后，如果需要加入新的对象，则需要采用合理的失效算法清除池中的对象。如FIFO,LRU,LFU。</p>

<h4>中途释放不用的大对象引用</h4>

<p>如：</p>

<pre><code>void foo(){
  Object bigObject=new Object();
  bigObject.doSomething();//下面不需要了
  // 下面有很多其他耗时，耗内存的操作的话，可考虑释放bigObject的引用
  bigObject=null;

  //some long opertions
}
</code></pre>

<h4>合理使用WeakReference 和 SoftReference</h4>

<p>有些对象我们允许在某些情况下即使我们还有引用，也要被GC。这时候可以考虑使用弱引用或者软引用。</p>

<p>当某些对象用作类似缓存对象的时候，内存不足就可以被回收的话，这类对象可以使用软引用。</p>

<p>而当某些对象A如果依附于某个对象B存在，如果B不存在了，A就没有必要存在，并且A的存在与否不应该阻碍B是否存在，那么A引用B的时候可以考虑使用弱引用。</p>

<p>关于两者区别可以参考<a href="http://stackoverflow.com/questions/299659/what-is-the-difference-between-a-soft-reference-and-a-weak-reference-in-java">what is the difference between a soft reference and a weak reference</a></p>

<h2>文件IO</h2>

<p>文件IO严重的主要原因是多个线程在写大量的数据在同一个文件，导致文件变得很大，写入速度越来越慢，并造成线程竞争文件锁激烈。</p>

<p>解决此类问题的方向有：</p>

<h4>异步写文件</h4>

<p>把文件的写入操作改为异步，如写日志的时候使用<code>log4j</code>的<a href="https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/AsyncAppender.html">AsynAppender</a></p>

<h4>批量读写</h4>

<p>如大数据插入数据库改改为批量的插入操作数据库的操作：</p>

<pre><code>  PreparedStatement ps = c.prepareStatement("INSERT INTO employees VALUES (?, ?)");

  ps.setString(1, "John");
  ps.setString(2,"Doe");
  ps.addBatch();

  ps.clearParameters();
  ps.setString(1, "Dave");
  ps.setString(2,"Smith");
  ps.addBatch();

  ps.clearParameters();
  int[] results = ps.executeBatch();
</code></pre>

<h4>限制文件大小</h4>

<p>无论数据库表，还是日志文件，我们都应该限制其的大小。</p>

<p>有必要的话，对于数据库表，需要分拆成小表，增加读写速度。</p>

<p>对于文件如日志文件则需要设置一个最大值，超过后生成另外一个新文件。如<code>log4j</code>中使用<code>RollingFileAppender</code>的<code>maxFileSize</code>属性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈Java同步机制]]></title>
    <link href="http://Jaskey.github.io/blog/2014/10/13/java-synchronization/"/>
    <updated>2014-10-13T21:11:20+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/10/13/java-synchronization</id>
    <content type="html"><![CDATA[<p>在多线程中，有两个核心的问题需要解决。一个是多个线程对于资源的竞争问题，我们需要同步，另外一个则是多个线程之间的交互。
今天简单谈谈Java的同步机制。</p>

<p>我们以一个十分简单的例子讲起。</p>

<pre><code>int i=0
public int getNextI(){
    return ++i;
}
</code></pre>

<p>这是一个极为简单的方法，但是在多线程的环境中则增加了许多其他复杂的因素。</p>

<p>首先，++i不是一个原子操作。进行i+1的操作，是分多步的，最后重新赋值写给i。</p>

<p>其次，在多线程的环境中，每个线程都会有一个working memory, 所以如果我们启动一个新线程操作<code>getNextI()</code>，i的操作是出现在working memory 中的，最后操作完成后一段时间才会重新写入main memory.</p>

<p>这样第一个问题就是，如何保证i的可见性。也就是说，假如两个线程T1，T2。T1对i进行操作后把i变成了2，但在T1把2这个值写入main memory之前，T2是读取不到2这个值的，也就是说他读到的是老的数据。</p>

<h2>volatile</h2>

<p>这时候，我们就可以把i用<code>volatile</code>修饰。 <code>volatile</code>的变量，线程不会复制到working memory，而是直接在main memory上操作。</p>

<p><code>volotile</code>特别适用于多线程环境中某个循环的结束条件。 如 <code>while(condition){//do someting}</code>, 这里面的condition应该声明为volatile，这样每一个线程对condition的修改都会立刻被其他线程读取到。</p>

<h2>synchronized</h2>

<p><code>volatile</code>只能保证变量的可见性，并不能保证i++的原子性。如果我们需要串行化的处理这个方法，我们需要谨慎使用volatile，而使用<code>synchronized</code>。</p>

<p>假如T1,T2同时进入<code>getNextI()</code>,然后T1和T2都读到了1，然后分别的进行++i,最后有可能i只是变成了2。我们希望T1和T2是有秩序的访问这个方法，这时候我们要使用到Synchronized机制了。</p>

<p>我们可以改成</p>

<pre><code>public synchronized int getNextI(){
    return i++;
}
</code></pre>

<p>这样在每个线程进入<code>getNextI()</code>之前，都会尝试去获取当前对象的intrinsic锁，并且只有一个线程可以获取。当结束该方法时候，就会释放，这样其他线程就可以获取到，这样就可以就可以保证T1和T2对方法操作是串行的。</p>

<p>注：
如果当前方法为静态方法，则锁是打在当前类的Class对象，而非对象本身。所以静态方法的控制和实例方法的控制是区分开来的。</p>

<p>但有些时候整个方法都加锁会影响性能，因为我们可能很多操作都不涉及共享资源，也就没有资源竞争的问题存在，所以synchronized 除了可以修饰方法，还可以修饰一段代码块，以便最小粒度的限制加锁的范围。当修饰代码块时候，必须要指定获取intrinsic锁的对象。如：</p>

<pre><code>public  int getNextI(){
    synchronized(this){
        return i++;
    }
}
</code></pre>

<p>更多文档可参考：</p>

<p><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html">http://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM垃圾回收算法]]></title>
    <link href="http://Jaskey.github.io/blog/2014/10/10/gc-algorithm/"/>
    <updated>2014-10-10T17:09:51+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/10/10/gc-algorithm</id>
    <content type="html"><![CDATA[<p>GC的原理是，找到不再被使用的对象（没有被引用），然后回收这些对象所占的内存。通常使用的是收集器的方式实现GC，主要有引用计数收集器和跟踪收集器</p>

<ul>
<li><strong>引用计数收集器</strong></li>
</ul>


<hr />

<p>顾名思义，引用计数收集器做的事是记录每个对象现在被引用的数量，而当计数器下降到0的时候，证明已经没有被引用了。就可以被回收了：如下图所示</p>

<p><img src="http://jaskey.github.io/images/gc/gc_reference_counter.jpg" title="引用计数收集器" alt="引用计数收集器" /></p>

<p>当A释放了B的引用后，就可以回收B的所占用的内存。</p>

<p>但是引用计数需要对每一个对象赋值时进行计数器的增减，这有一定的消耗。更重要的是，他无法实现循环引用的场景。例如如果B和C相互引用，那么即使A释放了B和C的引用，也无法回收B和C。</p>

<h2>- <strong>跟踪收集器</strong></h2>

<p>采用集中的管理方式，全局记录数据的引用状态。基于既定的条件触发（如定时或者空间不足），执行时候需要从跟集合扫描对象的引用关系，这要有复制（Copying）、标记-清除（Mark-Sweep）和标记-压缩（Mark-Compact）三种实现算法。</p>

<ul>
<li><strong>复制（Copying）</strong>
复制收集器从根集合开始扫描所有存活的对象，把能达到的所有对象（存活对象）复制到一块新的未被使用的空间中，没有到达的对象则证明没有被引用，可以回收。这样就解决了循环引用不可回收的问题，如下图所示：</li>
</ul>


<p><img src="../images/gc/copying.jpg" alt="复制" /></p>

<p><img src="http://jaskey.github.io/images/gc/copying.jpg" alt="复制算法" /></p>

<p>好处：仅需扫描一次所有存活的对象，当存活对象较少时（垃圾对象多），比较高效。适合于新生代区</p>

<p>坏处：需要额外的内存空间，不适合老年代（大部分是存活对象）</p>

<ul>
<li><strong>标记-清除(Mark-Sweep)</strong></li>
</ul>


<p>采用从根集合开始扫描，对能到达的对象（存活）进行标记，标记完成后，再扫描整个空间中未标记的对象，并进行回收。</p>

<p><img src="http://jaskey.github.io/images/gc/mark-sweep.jpg" title="标记-清除法" alt="标记-清除" /></p>

<p>好处：仅需扫描一次所有存活的对象，不需要移动对象，仅需要对不可达对象（垃圾对象）进行处理。适合于垃圾对象比较少的情况。</p>

<p>坏处：容易造成内存碎片</p>

<ul>
<li><strong>标记-压缩(Mark-Compact)</strong></li>
</ul>


<p>和标记-清除一样对可达对象（存活对象）进行标记，但是回收垃圾对象的后，会对其他存活的对象往左端空闲空间进行移动，并更新引用对象的指针。适合老年代。如下图：</p>

<p><img src="http://jaskey.github.io/images/gc/mark-compact.jpg" title="标记-压缩法" alt="标记-压缩" /></p>

<p>好处：对比标记-清除，避免了内存碎片</p>

<p>坏处：增加了移动对象的成本。</p>

<hr />

<ul>
<li><strong>增量算法</strong></li>
</ul>


<p>由于大部分的回收算法在回收时候，只有垃圾回收线程在运行，其他线程都会被挂起，直到垃圾回收结束。</p>

<p>这将导致在垃圾回收很久时候，其他线程一直不工作，而导致系统无响应。例如在Android应用中，如果UI进程5秒不响应就会出现ANR(Application Not Responding)错误。所以一个可行的方法是让垃圾进程与其他线程交替执行，每次垃圾回收仅进行部分内存的回收，减小系统的停顿时间。但由于线程的来回切换，提高了垃圾回收的开销。</p>

<hr />

<h2>总结：</h2>

<p>一个对象新创建的时候进入到新生代，然后垃圾回收几次后，该对象依然存活，于是就放入老年代。所以，新生代适合使用复制算法（大多是垃圾对象，复制开销小），老年代多用标记-压缩算法（大多是存活对象，回收对象少）。然后整个垃圾回收器的工作线程是用增量算法，时间轮转片执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么时候应该使用“静态类”而不使用单例？]]></title>
    <link href="http://Jaskey.github.io/blog/2014/09/24/when-to-use-static-class/"/>
    <updated>2014-09-24T20:26:02+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/09/24/when-to-use-static-class</id>
    <content type="html"><![CDATA[<p>经常我们都会使用单例，而有时候我们又会贪图方便而使用一个类然后全部都使用静态方法。那么，到底什么时候我们才应该使用这种都是静态方法的类呢(注：java没有静态类)？</p>

<ol>
<li>所有方法都是一些工具类的方法，如<code>Math</code>类</li>
<li>不希望被gc回收又不想自己去处理实例。</li>
<li>很确定这个类将来也不会是有状态的（stateful）而且你确定你不需要多个实例。</li>
</ol>


<p>注：</p>

<p>如果我们使用单例模式的话，将来假如我们需要多个实例，将非常轻松的改变，但是使用static方法的类就不行。而且使用单例的话，将很好地利用继承、多态等方法。</p>

<p>stackoverflow相关讨论：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/839383/advantage-of-static-class-over-use-of-singleton/">&ldquo;Advantage of Static class over use of Singleton&rdquo;</a></li>
<li><a href="http://stackoverflow.com/questions/3714971/difference-between-singleton-class-and-static-class">&ldquo;Difference between singleton class and static class?&rdquo;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么java8引进了Lambda表达式]]></title>
    <link href="http://Jaskey.github.io/blog/2014/09/24/why-java8-introduces-lamda/"/>
    <updated>2014-09-24T18:58:45+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/09/24/why-java8-introduces-lamda</id>
    <content type="html"><![CDATA[<p>我们借用官方文档的例子：<a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach1">http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#approach1</a></p>

<p>看看Lambda 怎么样让我们的代码更具有可读性，而且更为简洁。</p>

<p>我们假如需要输出一个人的信息，我们可能有以下的类</p>

<pre><code>public static void printPersons(
    List&lt;Person&gt; roster, CheckPerson tester) {
    for (Person p : roster) {
        if (tester.test(p)) {
            p.printPerson();
        }
    }
} 



interface CheckPerson {//接口，用于对于Person对象的验证
    boolean test(Person p);
}



class CheckPersonEligibleForSelectiveService implements CheckPerson {具体的CheckPerson实现 
    public boolean test(Person p) {
        return p.gender == Person.Sex.MALE &amp;&amp;
            p.getAge() &gt;= 18 &amp;&amp;
            p.getAge() &lt;= 25;
    }
}
</code></pre>

<p>然后当我们调用的时候，我们会写：</p>

<pre><code>printPersons(roster, new CheckPersonEligibleForSelectiveService());
</code></pre>

<p>显然，<code>Person</code>的确是一个重要的对象，但是<code>CheckPerson</code> 和 <code>CheckPersonEligibleForSelectiveService</code>呢？ 是不是一定需要一个新建一个对象来只调用一次他的方法？其实，我们只是需要这样做（面向对象中，必须要有一个类，然后新建他的实例（非静态的话），才能调用他的方法），所以才这样做。</p>

<p>那假如封装的只是一个函数，然后我们可以简单的传递这样一个函数就能做到这些的话，是不是就很好了呢？这样的话，我们就不需要又创建一个实现类，又自己说动新建一个对象来仅仅只是调用一个函数了。</p>

<p>这时候，我们就需要Lambda了。</p>

<pre><code>printPersons(
    roster,
    (Person p) -&gt; p.getGender() == Person.Sex.MALE
        &amp;&amp; p.getAge() &gt;= 18
        &amp;&amp; p.getAge() &lt;= 25
);
</code></pre>

<p>这样的代码极为的简洁而且具有可读性。而且，我们不需要手动去新建一个<code>CheckPersonEligibleForSelectiveService</code>实现类，而且也不需要手动去新建这样的对象，lambda都帮我们做好了。</p>

<p>当然，我们原本也可以使用匿名类去解决这个问题</p>

<pre><code>printPersons(
    roster,
    new CheckPerson() {
        public boolean test(Person p) {
            return p.getGender() == Person.Sex.MALE
                &amp;&amp; p.getAge() &gt;= 18
                &amp;&amp; p.getAge() &lt;= 25;
        }
    }
);
</code></pre>

<p>但，我们问问自己，我们真的有必要创建一个对象就仅仅为了去做Person验证吗？这样非常的反直觉。</p>

<p>如果我们需要的仅仅是一个函数而不是一整个对象，那么我们就应该关注在这个函数本身，而不是为了这个函数而衍生出一个类，一个对象。</p>

<p>更多本问题讨论请参考：<a href="http://stackoverflow.com/questions/23097484/why-lamda-expression-are-introduced-in-java8">http://stackoverflow.com/questions/23097484/why-lamda-expression-are-introduced-in-java8</a></p>
]]></content>
  </entry>
  
</feed>
