<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[薛定谔的风口猪]]></title>
  <link href="http://Jaskey.github.io/atom.xml" rel="self"/>
  <link href="http://Jaskey.github.io/"/>
  <updated>2016-01-19T21:02:41+08:00</updated>
  <id>http://Jaskey.github.io/</id>
  <author>
    <name><![CDATA[Jaskey Lam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[避免写出不走索引的SQL, MySQL]]></title>
    <link href="http://Jaskey.github.io/blog/2016/01/19/mysql-bad-sql-with-no-index/"/>
    <updated>2016-01-19T20:24:16+08:00</updated>
    <id>http://Jaskey.github.io/blog/2016/01/19/mysql-bad-sql-with-no-index</id>
    <content type="html"><![CDATA[<p>在MySQL中，并不是你建立了索引，并且你在SQL中使用到了该列，MySQL就肯定会使用到那些索引的，有一些情况很可能在你不知不觉中，你就“成功的避开了”MySQL的所有索引。</p>

<p>现假设有<code>t_stu</code>表，age,sname上建立了索引</p>

<h3>索引列参与计算</h3>

<p>如果where条件中<code>age</code>列中使用了计算，则不会使用该索引</p>

<pre><code>SELECT `sname` FROM `t_stu` WHERE `age`=20;-- 会使用索引
SELECT `sname` FROM `t_stu` WHERE `age`+10=30;-- 不会使用索引！！因为所有索引列参与了计算
SELECT `sname` FROM `t_stu` WHERE `age`=30-10;-- 会使用索引
</code></pre>

<p>故，如果需要计算，千万不要计算到索引列，想方设法让其计算到表达式的另一边去。</p>

<h3>索引列使用了函数</h3>

<p>同样的道理，索引列使用了函数，一样会导致相同的后果</p>

<pre><code>SELECT `sname` FROM `stu` WHERE concat(`sname`,'abc') ='Jaskeyabc'; -- 不会使用索引,因为使用了函数运算,原理与上面相同
SELECT `sname` FROM `stu` WHERE `sname` =concat('Jaskey','abc'); -- 会使用索引
</code></pre>

<h3>索引列使用了Like %XXX</h3>

<pre><code>SELECT * FROM `houdunwang` WHERE `uname` LIKE '前缀就走索引%' -- 走索引
SELECT * FROM `houdunwang` WHERE `uname` LIKE '后缀不走索引%' -- 不走索引
</code></pre>

<p>所以当需要搜索email列中.com结尾的字符串而email上希望走索引时候,可以考虑数据库存储一个反向的内容reverse_email</p>

<pre><code>SELECT * FROM `table` WHERE `reverse_email` LIKE REVERSE('%.com'); -- 走索引
</code></pre>

<p>注：以上如果你使用<code>REVERSE(email) = REVERSE('%.com')</code>，一样得不到你想要的结果，因为你在索引列email列上使用了函数，MySQL不会使用该列索引</p>

<p>同样的，索引列上使用正则表达式也不会走索引。</p>

<h3>字符串列与数字直接比较</h3>

<p>这是一个坑，假设有一张表,里面的a列是一个<strong>字符char类型</strong>,且a上建立了索引,你用它与数字类型做比较判断的话：</p>

<pre><code> CREATE TABLE `t1` (`a` char(10));

 SELECT * FROM `t1` WHERE `a`='1' -- 走索引
 SELECT * FROM `t2` WHERE `a`=1 -- 字符串和数字比较，不走索引！
</code></pre>

<p>但是如果那个表那个列是一个数字类型，拿来和字符类型的做比较，则不会影响到使用索引</p>

<pre><code> CREATE TABLE `t2` (`b` int);

 SELECT * FROM `t2` WHERE `b`='1' -- 虽然b是数字类型，和'1'比较依然走索引
</code></pre>

<p>但是，无论如何，这种额外的隐式类型转换都是开销，而且由于有字符和数字比就不走索引的情况，故建议<strong>避免一切隐式类型转换</strong></p>

<h3>尽量避免 OR 操作</h3>

<pre><code>select * from dept where dname='jaskey' or loc='bj' or deptno=45 --如果条件中有or,即使其中有条件带索引也不会使用。换言之,就是要求使用的所有字段,都必须建立索引
</code></pre>

<p>所以除非每个列都建立了索引，否则不建议使用OR，在多列OR中，可以考虑用UNION 替换</p>

<pre><code>select * from dept where dname='jaskey' union
select * from dept where loc='bj' union
select * from dept where deptno=45
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git中只merge部分commit]]></title>
    <link href="http://Jaskey.github.io/blog/2015/12/22/git-cherry-pick/"/>
    <updated>2015-12-22T16:12:38+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/12/22/git-cherry-pick</id>
    <content type="html"><![CDATA[<h2>cherry-pick</h2>

<p>在Git 1.7.2以上的版本引入了一个 cheery-pick的命令可以只merge 部分的commit而不用直接把整个分支merge过来</p>

<pre><code>git cherry-pick &lt;commit 号&gt;
</code></pre>

<p>如：</p>

<pre><code>git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf
</code></pre>

<p>这样就只会把这个<code>e43a6fd3e94888d76779ad79fb568ed180e5fcdf</code> commit的内容pull到当前的分支，不过你会得到一个新的commit。
这样就可以按需merge需要的commit,而不需要的就可以直接废弃咯。</p>

<h3>多个commit:</h3>

<p>可以用空格指定多个commit:</p>

<pre><code>git cherry-pick A B C D E F
</code></pre>

<!--more-->


<h2>范围merge:</h2>

<p><code>cherry-pick</code>可以范围merge ,使用 两次版本间使用<code>..</code>连起来：</p>

<pre><code>cherry-pick A..B
</code></pre>

<p>这样会把从从版本A（不包含）到B（包含）即（A，B]的版本pull到当前分支</p>

<p>甚至，可以使用多段，同样使用空格隔开：</p>

<pre><code>git cherry-pick A..B C..D E..F
</code></pre>

<p>注：中间需要自己解决冲突，若出现冲突，可以尝试使用 <code>git mergetool</code> 使用GUI工具解决</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS实现垂直居中]]></title>
    <link href="http://Jaskey.github.io/blog/2015/08/04/css-vertical-align/"/>
    <updated>2015-08-04T16:49:40+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/08/04/css-vertical-align</id>
    <content type="html"><![CDATA[<p>CSS垂直居中真是一个令人头疼的事，最近遇到了一个较为简单且通用的方法，总结如下：</p>

<p>1.无需要设置自己高度，和父容器高度, 利用绝对定位只需要以下三行：</p>

<pre><code>parentElement{
    position:relative;
}
childElement{
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}
</code></pre>

<p>2.若只有父容器下只有一个元素，且父元素设置了高度，则只需要使用相对定位即可</p>

<pre><code>parentElement{
    height:xxx;
}
.childElement {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}
</code></pre>

<p>例子猛击:<a href="http://jsfiddle.net/V5uKe/904/" title="demo">DEMO</a></p>

<hr />

<h2>Flex布局</h2>

<p>如果你不需要兼容老式浏览器(例如IE9及以下)，使用Flex布局可以非常轻松实现</p>

<p>浏览器支持如下：
<img src="http://Jaskey.github.io/images/css/flex-support.jpg" title="flex的支持性" alt="Flex的支持性" /></p>

<p>样式：</p>

<pre><code>parentElement{
    display:flex;/*Flex布局*/
    display: -webkit-flex; /* Safari */
    align-items:center;/*交叉轴居中，这里由于flex-direction默认是row,即垂直居中*/
}
</code></pre>

<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效</p>

<p>例子猛击:<a href="http://codepen.io/anon/pen/PZKZqe" title="Flex垂直居中Demo">Flex demo</a></p>

<hr />

<p>Flex教程可参考<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 博文中引入javascript文件/HTML文件]]></title>
    <link href="http://Jaskey.github.io/blog/2015/07/30/TEST-include/"/>
    <updated>2015-07-30T12:18:28+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/07/30/TEST-include</id>
    <content type="html"><![CDATA[<p><code>.markdown</code>文件中是可以引入javascript甚至是html文件的，这样以后博文里面插入代码运行结果写demo就很方便了。</p>

<p>以下是具体方法，并带一个例子</p>

<h2>引入Javascript</h2>

<p>语法：</p>

<pre><code>&lt;script type="text/javascript" src="http://Jaskey.github.io/path/to/file.js"&gt;&lt;/script&gt;
</code></pre>

<p>例如： 在 source 中的404.markdown 中 加入：</p>

<pre><code>&lt;script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8&gt;&lt;/script&gt;
</code></pre>

<p>即可在404页面中跳转到腾讯的公益页面</p>

<h2>引入HTML文件</h2>

<p>以下为引入后的样本实例：</p>

<div id="myelement">
    .markdown文件中，在需要引入HTML文件的地方写上：
    <p id="includeCode">&#8217;{&#8216;%include demo/include_HTML_demo.html +&#8217;%&#8217;}&#8217; (注:去掉其中的单引号)</p>
    <p>HTML代码即会导入，若内嵌JavaScript脚本，也会自动导入允许。</p>
    <p>这里你看到的区域都是外部导入的HTML文件，尝试点击这里，会发现有脚本运行.</p>
    <p id="clickme">点我试试看</p>
</div>




<script>

    $(function(){
        $('#includeCode').text($('#includeCode').text().replace(/\+|\"/,''));
        $('p#clickme').hover(function(){
        $(this).css("color","blue");
        },function(){
        $(this).css("color","black");
        });

        $('div#myelement').on('click',function(e){
        alert("你刚刚点击了#myelement区域，onClick事件触发了。");
        });
    })

</script>


<p>注：由于octopress已经引入了jQuery,故本页面无须额外引入jQuery.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jackson 操作JSON]]></title>
    <link href="http://Jaskey.github.io/blog/2015/05/13/jackson-json/"/>
    <updated>2015-05-13T21:18:28+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/05/13/jackson-json</id>
    <content type="html"><![CDATA[<h2>Maven 支持：</h2>

<pre><code>  &lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;codehaus&lt;/id&gt;
        &lt;url&gt;http://repository.codehaus.org/org/codehaus&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;
        &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;
        &lt;version&gt;1.8.5&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
</code></pre>

<p>需要进行JSON操作的转换，仅需要一个<code>ObjectMapper</code>对象
    ObjectMapper mapper = new ObjectMapper();</p>

<p>转换为对象时候，使用<code>read</code>相关方法，转换为JSON字符串时，使用<code>write</code>相关方法。</p>

<h2>Java object to JSON</h2>

<pre><code>ObjectMapper mapper = new ObjectMapper();
mapper.writeValue(new File("c:\\user.json"), user);//写到文件,User 有get set 方法的POJO
</code></pre>

<p>大多数情况下，我们只需要一个JSON字符串，可以使用<code>StringWriter</code>作为参数的重载的<code>writeValue</code>方法：</p>

<pre><code>StringWriter sw =new StringWriter();
ObjectMapper mapper = new ObjectMapper();
mapper.writeValue(sw, user);//写到StringWriter
String JSON = sw.toString();
sw.close();
</code></pre>

<p>也可以直接使用<code>writeValueAsString</code> ，其内部使用的也是<code>StringWriter</code>的。</p>

<pre><code>ObjectMapper mapper = new ObjectMapper();
String JSON  = mapper.writeValueAsString(user));//直接转为String 类型的JSON
</code></pre>

<h2>JSON to Java object</h2>

<pre><code>ObjectMapper mapper = new ObjectMapper();
User user = mapper.readValue(new File("c:\\user.json"), User.class);//User 有get set 方法的POJO
</code></pre>

<h1>集合操作</h1>

<h2>Map/List to JSON</h2>

<p>和普通对象一样，使用(同样，可以使用重载方法)</p>

<pre><code>objectMapper.writeValue(new File(jsonFilePath), mapObject);
objectMapper.writeValue(new File(jsonFilePath), listObject);
</code></pre>

<h2>JSON to Map/List/数组</h2>

<pre><code>     Map&lt;String, Object&gt; mapObject = mapper.readValue(new File('c:\\user.json'),
                new TypeReference&lt;Map&lt;String, Object&gt;&gt;() {});//使用TypeReference, 注意末尾有{}



     List&lt;String&gt; listObject = mapper.readValue(new File('c:\\user.json'),
                new TypeReference&lt;List&lt;String&gt;(){});//使用TypeReference, 注意末尾有{}


     String[] array = mapper.readValue(new File('c:\\user.json'),
                String[].class);//使用class对象
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改IntelliJ的快捷键中的CTRL+Y为Redo操作]]></title>
    <link href="http://Jaskey.github.io/blog/2015/05/07/change-intelij-short-cut/"/>
    <updated>2015-05-07T18:02:57+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/05/07/change-intelij-short-cut</id>
    <content type="html"><![CDATA[<p>IntelliJ是一个非常强大的IDE，但是对于长期习惯Windows用户，里面有些快捷键非常不好。最典型的就是<kbd>CTRL</kbd>+<kbd>Y</kbd>，在IntelliJ里面<kbd>CTRL</kbd>+<kbd>Y</kbd>是删除操作，可是我们习惯与<KBD>CTRL</KBD>+<KBD>Y</KBD>是Redo（重做）操作。</p>

<p>可以用以下方式修改这些快捷键,注：适用如IDEA, PyCharm等IDE:</p>

<ol>
<li>进入Settings（快捷键：<kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>S</kbd>，或者<kbd>SHITT</kbd>*2出<code>Search Everywhere</code>中搜索settings进入）</li>
<li>左边菜单选择KeyMap（可搜索）</li>
<li>选择默认的keymaps（IntelliJ的）,然后选择copy出一份新的，在新的keymaps里面修改</li>
<li>在新的keymaps里面的<code>Main Menu--&gt;Edit--&gt;Redo</code> 右键选择 <code>Add Keyboard Shortcut</code></li>
<li>键盘按<kbd>CTRL</kbd>+<kbd>Y</kbd> (修改的快捷键)</li>
<li>OK</li>
<li>选择 &ldquo;Remove&rdquo; ，当窗口提示： &ldquo;the shortcut is already assigned to other actions. Do you want to remove other assignments?&rdquo;</li>
<li>Apply</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python中用dictionary操作SQL Select, Insert]]></title>
    <link href="http://Jaskey.github.io/blog/2015/05/07/insert-sql-with-dictionary-python/"/>
    <updated>2015-05-07T16:19:49+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/05/07/insert-sql-with-dictionary-python</id>
    <content type="html"><![CDATA[<p>MySQLdb中可以轻松地使用dictionary操作SQL。</p>

<p>首先，连接数据库</p>

<pre><code>conn = MySQLdb.connect(host=host,
                       user=user,
                       passwd=passwd,
                       db=db,
                       charset=charset)
</code></pre>

<h1>SELECT:</h1>

<p>在获取cursor的时候，传入<code>MySQLdb.cursors.DictCursor</code>即可</p>

<pre><code>cursor = conn.cursor(MySQLdb.cursors.DictCursor)  ##结果集成为dictionary
cursor.execute(select_sql )  # query

for row in cursor:
    print type(row),row
    name = row["name"]  # 直接使用key获取
    id = row["id"]      # 直接使用key获取
</code></pre>

<p>会发现,row的类型已经是一个dict, 其中每一列都可以使用key值获取
    <type 'dict'> {id:123L,&lsquo;name&rsquo;:u&#8217;abc&#8217; }</p>

<h1>INSERT</h1>

<p>如果需要把一个准备好的dict插入到数据库，不想一个个对应的赋值，可以考虑使用如下方式:</p>

<pre><code>myDict = {'name':'abc','age':16L}
insert_table = 'mytable'
placeholders = ', '.join(['%s']* len(mydict))  ##按照dict长度返回如：%s, %s 的占位符
columns = ', '.join(mydict.keys())    ##按照dict返回列名，如：age, name
insert_sql =  "INSERT INTO %s ( %s ) VALUES ( %s )" % (insert_table, columns, placeholders) #INSERT INTO mytable ( age, name ) VALUES ( %s, %s )

cursor.execute(insert_sql, mobileDict.values())  ##执行SQL,绑定dict对应的参数
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Insert or Update操作，MySQL]]></title>
    <link href="http://Jaskey.github.io/blog/2015/05/05/insert-or-update-mysql/"/>
    <updated>2015-05-05T16:46:59+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/05/05/insert-or-update-mysql</id>
    <content type="html"><![CDATA[<p>如果需要执行操作如：“插入一行记录，若存在，则更新”的操作，在MySQL中，不需要使用Exists也不需要分两次语句执行，可以直接使用如下语句：</p>

<pre><code> INSERT INTO table1 (user, auth) VALUES ('user1', 1) ON DUPLICATE KEY UPDATE auth = 1;
</code></pre>

<p>上面的语句达到的效果是往table1里面插入一条记录，给<code>user1</code> <code>1</code>的权限，若存在主键或者唯一索引冲突，则更新权限值为1。</p>

<p>注：这语法不是标准SQL语法，所以仅适用于MySQL ，详情参看：<a href="https://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html">https://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html</a></p>

<p>若用于JDBC, 而替换的数据不是像上面一个常数值，而是由变量决定，SQL可以如下：</p>

<pre><code>INSERT INTO mytable VALUES (?, ?, ?, ?)
ON DUPLICATE KEY UPDATE `col1`=values(col1), 
                        `col2`=values(col2), 
                        `col3`=values(col3), 
                        `col4`=values(col4);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript实现私有方法]]></title>
    <link href="http://Jaskey.github.io/blog/2015/03/04/js-private-methods/"/>
    <updated>2015-03-04T15:06:11+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/03/04/js-private-methods</id>
    <content type="html"><![CDATA[<p>JavaScript的所有成员（属性+方法）都是公有的，但是我们有方法模拟出类似于OOP一样的私有方法。</p>

<p>以下使用例子<code>Person</code>，假如我们需要一个<code>toStr</code>的私有方法，只能在Person内部才能访问。
其中<code>printInfo</code>方法为公有，将使用到<code>toStr</code>方法和其他私有方法。</p>

<h2>1.在构造函数中定义私有方法</h2>

<pre><code>//构造函数
function Person(name,age){
    this.name = name;
    this.age = age;

    //直接在constructor中定义私有方法
    function privateMethod(){
        console.log("in private method");
    }
    //使用var在构造函数定义私有方法
    var toStr = function(){
        return this.name + ' is ' + this.age;
    }

    //公有方法
    this.printInfo = function(){
        console.log(toStr());
        privateMethod();
    }
}
//test case
var p = new Person('Jaskey',24);
p.printInfo();//两个私有方法能访问，但是toStr字段访问有问题.本机测试显示：  is undefined
p.toStr();//p.toStr is not a function
</code></pre>

<p>以上方法，我们的确构造了两个私有的方法<code>toStr</code>和<code>privateMethod</code>且在外部不能访问而内部可以访问。</p>

<p>但从打印的结果显示<code>toStr</code>并不能正确的访问到<code>Person</code>对象中的<code>name</code>和<code>age</code>。<strong>原因是当<code>printInfo</code>方法调用<code>toStr</code>时，<code>toStr</code>被当成了函数调用，所以<code>this</code>的scope被绑定到了全局（浏览器中即window）。</strong></p>

<p>要解决这个问题，我们必须要让<code>toStr</code>调用时，<code>this</code>绑定到<code>Person</code>的对象中，所以调用<code>toStr</code>时，可使用<code>call</code>或者<code>apply</code>方法调用。如：<code>toStr.call(this)</code>。</p>

<p>修改版本：</p>

<pre><code>function Person(name,age){
    this.name = name;
    this.age = age;

    //直接在constructor中定义私有函数
    function privateMethod(){
        console.log("in private method");
    }
    //使用var定义私有函数
    var toStr = function(){
        return this.name + ' is ' + this.age;
    }

    this.printInfo = function(){
        console.log(toStr.call(this));//把this绑定到当前的对象
        privateMethod.call(this);//为了统一，把privateMethod的this都绑定到正确的scope
    }
}
</code></pre>

<h3>问题：</h3>

<p>使用这种在构造函数中定义私有方法的方式，有两个问题：</p>

<p>1.构造函数中的私有方法并不属于prototype，所以prototype的方法不可以访问这样的方法：</p>

<pre><code>Person.prototype.myPublicMethod=function(){
    toStr();//toStr is not defined
}
</code></pre>

<p>2.内存消耗。每一次new一个<code>Person</code>对象时,每个函数都会重新创建一份,而我们更希望是share同一个函数对象。</p>

<h2>2.使用Module Pattern实现</h2>

<p><em>Douglas Crockford</em> 有一个模式叫<strong>“Module Pattern”</strong>, 可以使用闭包的方法解决实现私有方法的问题，并且可读性非常高。</p>

<p>使用这个方法，我们自己构造一个Person的原型对象，利用一个闭包，则让其能访问外部的私有方法。</p>

<p>同理，由于需要绑定正确的this作用域，我们使用<code>call</code>方法调用</p>

<pre><code>//构建一个原型对象
Person.prototype = (function(){
    /******私有方法定义*****/

    //通过var定义
    var toStr = function(){
        return this.name + " is " + this.age
    }

    //直接定义
    function privateMethod(){
        console.log("in private method");
    }


    return {//返回的这个函数会返回一个原型对象
        constructor:Person,//把原型的constructor属性设置到正确的构造函数

        /*******公有方法*******/
        printInfo:function(){
            console.log("printing info:",toStr.call(this));
        },

        publicMethod:function(){
            privateMethod.call(this);
        }
    }

})();//注意这里的括号表示立刻执行此匿名函数，返回原型对象


//test case
var p = new Person('Jaskey',24);
p.printInfo();//printing info: Jaskey is 24
p.publicMethod();// in private method
p.toStr();//"undefined is not a function"
</code></pre>

<p>通过返回一个新的原型对象，该原型对象可以访问到私有的方法，而且可读性非常高,私有的方法放到原型外面，原型里面的方法都是公有方法。</p>

<h2>定义一个调用方法以正确this调用所有私有方法</h2>

<p>像这样每次的私有方法调用，都需要重新绑定this的scope，非常繁琐。能不能把这个操作封装起来呢？
答案是有的，我们可以定义一个<code>_</code>方法，该方法接受一个函数指针，然后返回另外一个this绑定到当前对象的函数，以便正确调用:</p>

<pre><code>    //返回一个函数，该函数的this绑定到当前对象
    _:function(fun){
        var that = this;//保存当前对象作用域
        return function(){//返回一个函数，该函数会调用目标函数，但this绑定到that作用域
            return fun.apply(that,arguments);//记得return
        }
    }
</code></pre>

<p>以第二个闭包的方法为例，最后的<code>Person</code>版本如下:</p>

<pre><code>function Person(name,age){
    this.name = name;
    this.age = age;    
}


Person.prototype = (function(){
/******私有方法定义*****/
    var toStr = function(){
        return this.name + " is " + this.age;
    }

function privateMethod(param){
    console.log("in privateMethod param = ",param);
    this.publicMethod2();
}

return {//返回一个原型对象
    constructor:Person,//把原型的constructor属性设置到正确的构造函数

    /*******公有方法*******/
    printInfo:function(){
        console.log("-------printing info-------");
        console.log("printing info:",this._(toStr));
        this._(privateMethod)('param from printInfo')
        console.log("-------end of printing info-------");
    },

    publicMethod:function(){
        console.log("-------public Method-------");
        this._(privateMethod)('param from pubicMethod');
        console.log("-------end of Public Method-------");
    },
    publicMethod2:function(){
        console.log('in publicMethod2');
    },

    //返回一个函数，该函数的this绑定到当前对象
    _:function(fun){
        var that = this;
        return function(){
            return fun.apply(that,arguments);//注意return
        }
    }
}

})();//立刻执行

//test case:
var p = new Person('Jaskey',24);
p.printInfo();
p.publicMethod();
//p._(toStr)();//toStr is not defined
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改octopress的时间格式]]></title>
    <link href="http://Jaskey.github.io/blog/2015/02/16/octopress-modify-date-format/"/>
    <updated>2015-02-16T17:59:19+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/02/16/octopress-modify-date-format</id>
    <content type="html"><![CDATA[<p>之前在<code>_config.yml</code>中增加了时间格式的设置,但一直没效果:</p>

<p><code>date_format: "%F %a"       #2012-01-01</code></p>

<p>后来在StackOverflow上提了一个问题找到了答案：</p>

<ol>
<li><p>安装Octopress Date format：</p>

<pre><code> gem install octopress-date-format
</code></pre></li>
<li><p>在<code>_config.yml</code>中加入：</p>

<pre><code> gems:
     - octopress-date-format
</code></pre></li>
<li><p>配置自定义格式。在<code>_config.yml</code>中配置时间的格式。默认的格式是：</p>

<pre><code> date_format: 'ordinal' # July 3rd, 2014
 time_format: '%-I:%M %P'   # 2:08 pm
</code></pre></li>
</ol>


<p>我们可以改成:</p>

<pre><code>    date_format: "%Y-%m-%d"  # e.g. 2014-07-03
    time_format: "%H:%M"     # 24 hour time
</code></pre>

<p>最后生成页面，大功告成：</p>

<pre><code>    rake generate
</code></pre>

<p>更多详情可参看：<a href="https://github.com/octopress/date-format#configuration">https://github.com/octopress/date-format#configuration</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS中的display 'Block','inline','inline-block']]></title>
    <link href="http://Jaskey.github.io/blog/2015/02/16/css-display-properties/"/>
    <updated>2015-02-16T16:39:20+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/02/16/css-display-properties</id>
    <content type="html"><![CDATA[<p>CSS的 <code>display</code> 中有三个不同的值会影响布局，今天把总结下几个的不同特点。</p>

<h2>display: inline</h2>

<ol>
<li>不会加入换行符，可以允许后面有HTML元素挨着。</li>
<li>margin-top/bottommargin-top/bottom 失效.</li>
<li>padding-top/bottom可以生效,但是不影响空白的空间,所以设置的padding会和其他元素重叠</li>
<li><strong>不能</strong>设置<code>width</code>或者<code>height</code></li>
</ol>


<p>inline的元素有:</p>

<p><code>&lt;span&gt;``&lt;a&gt;</code></p>

<h2>display: block</h2>

<ol>
<li>在block后强制换行</li>
<li>可以设置<code>width</code>或者<code>height</code></li>
<li>padding,margin表现正常</li>
</ol>


<p>block的元素有:</p>

<p><code>&lt;p&gt;``&lt;div&gt;``&lt;h1&gt;</code></p>

<h2>display: inline-block</h2>

<ol>
<li>像<code>inline</code>一样,允许元素挨在同一行,</li>
<li>可以设置<code>width</code>或者<code>height</code></li>
<li>像<code>block</code>一样,padding,margin表现正常</li>
</ol>


<h2>例子</h2>

<p>以下几张图展现几个不同的<code>display效果</code>:</p>

<p>假如我们在div的一大串文字中,嵌入了一个<code>&lt;span&gt;</code>的文字, 通过设置span的不同<code>display</code>,将有以下效果:</p>

<p><strong>diplay:inline</strong></p>

<p><img src="http://Jaskey.github.io/images/css/display-inline.png" title="display:inline" alt="display:inline" /></p>

<p><strong>display:block</strong></p>

<p><img src="http://Jaskey.github.io/images/css/display-block.png" title="display:block" alt="display:block" /></p>

<p><strong>display:inline-block</strong></p>

<p><img src="http://Jaskey.github.io/images/css/display-inline-block.png" title="display:inline-block" alt="display:inline-block" /></p>

<p>可以认为,<code>display:inline-block</code>就像<code>display:inline</code>一样,但是可以正常的设置高度和宽度等属性.所以我们可以使用<code>display:inline-block</code>替换<code>float</code>,去完成文字环绕.</p>

<p><a href="http://jsfiddle.net/Mta2b/" title="demo链接">demo链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery BlockUI 的使用]]></title>
    <link href="http://Jaskey.github.io/blog/2015/02/10/jquery-block-ui/"/>
    <updated>2015-02-10T12:05:30+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/02/10/jquery-block-ui</id>
    <content type="html"><![CDATA[<p>jQuery BlockUI Plugin<a href="http://malsup.github.io/jquery.blockUI.js" title="下载链接">(下载链接)</a>  能做到方便得屏蔽整个page或者某些元素。当用于异步请求的时候，尤为有用。</p>

<p>用法也非常简单。以下简单的记录下使用笔记：</p>

<ol>
<li>使用前，需要先引入jQuery 再引入jQuery blockUI。</li>
<li>当需要全屏block时候,使用API <code>$.blockUI()</code>;,unblock使用<code>$.unblockUI()</code></li>
<li>部分的Element block时，使用 <code>$("选择器").block();</code>unblock使用<code>$(选择器).unblock()</code>即可</li>
</ol>


<p>需要自定义block的消息或者样式，可以传入一个像下面的一个对象：</p>

<pre><code>            {
                message: '&lt;h1&gt;Processing&lt;/h1&gt;',//显示的消息
                centerX: false,//当element block时候，注意设置此属性为false,否则位置不生效
                centerY: false,
                css: {
                    top: '5%',
                    left: '5%'
                    ....//其他CSS属性
                }
            }
</code></pre>

<p>关于此对象的更多细节，可以查看：<a href="http://malsup.com/jquery/block/#options">http://malsup.com/jquery/block/#options</a></p>

<p>各种demo可以查看：<a href="http://malsup.com/jquery/block/#demos">http://malsup.com/jquery/block/#demos</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中返回函数]]></title>
    <link href="http://Jaskey.github.io/blog/2015/02/02/javascript_function%20closure/"/>
    <updated>2015-02-02T18:20:05+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/02/02/javascript_function closure</id>
    <content type="html"><![CDATA[<p>最近学习JavaScript,遇到了函数闭包的相关问题，由于这是Java没有的概念，认知上容易糊涂。到底</p>

<pre><code>function a(){
    function b(){
        alert('b');
      } 
        return b;//没有括号
} 
</code></pre>

<p>和</p>

<pre><code>function a(){
    function b(){
        alert('b');
    }
        return b();//多一个括号
}
</code></pre>

<p>有何区别呢？ 在Java中，我们是不能返回一个函数的，也不能为一个对象的属性赋值为函数，但这在Javascript中都可以。以上两种的函数都是正确的，但却表达着完全一样的意义。</p>

<p>第一种方式返回时候不带括号，return函数的名称时，<strong>返回的其实是一个函数b的引用</strong>，即<code>function a</code> 返回的结果是<code>function b</code>的引用。</p>

<p>而第二种方式带着括号，其实是返回b的执行结果。而b本身不返回东西，所以<code>return undefined</code>。</p>

<p>请观察以下几个demo：</p>

<pre><code>function a() {
    alert('A');
}
//alerts 'A', returns undefined

function b() {
    alert('B');
    return a;
}
//alerts 'B', returns function a

function c() {
    alert('C');
    return a();
}
//alerts 'C', alerts 'A', returns undefined

alert("Function 'a' returns " + a());
alert("Function 'b' returns " + b());//特别留意这里，b()返回的是整一个函数。
alert("Function 'c' returns " + c());//这里是返回a()的结果，所以会先alert('A'),再返回underfined
</code></pre>

<p>加上参数以便更加理解这一例子：</p>

<pre><code>function a(who) {
    alert('a say hello to '+ who);
}
//alerts 'A', returns undefined

function b(who) {
    alert('b say hello to '+ who);
    return a;
}
//alerts 'B', returns function a

function c(who) {
    alert('c say hello to '+ who);
    return a(who);
}
//alerts 'C', alerts 'A', returns undefined

alert("Function 'a' returns " + a("junjie"));//return undefined
alert("Function 'b' returns " + b("junjie"));//返回整个函数a的定义
alert("Function 'c' returns " + c('junjie'));//先调用了a(who)，所以alert 了"a say hello to junjie"，再返回undefined，因为a本身不返回值
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Untrace .gitignore中已经被commit的文件]]></title>
    <link href="http://Jaskey.github.io/blog/2014/12/03/ignore-files-that-have-already-been-committed/"/>
    <updated>2014-12-03T11:35:01+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/12/03/ignore-files-that-have-already-been-committed</id>
    <content type="html"><![CDATA[<p>很可能在添加忽略文件到.gitignore之前，你已经commit过那些文件，如何把这些提交了的文件忽略并且不在本地删除这些文件，让<code>.gitignore</code>生效，以下是步骤</p>

<ol>
<li>确保你现在branch上的重要文件已经commit.</li>
<li><p>在项目根路径运行：</p>

<pre><code> git rm -r --cached .
</code></pre></li>
<li><p>然后从staging area中移除所有已经改变的文件:</p>

<pre><code> git add .
</code></pre></li>
<li><p>最后再提交即可</p>

<pre><code> git commit -m ".gitignore is working, fixed untracked files"
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从属性文件为变量赋值，Spring]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/30/inject-propeties-values/"/>
    <updated>2014-11-30T03:38:56+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/30/inject-propeties-values</id>
    <content type="html"><![CDATA[<p>有时候，我们需要从一些属性文件为变量赋值，这样修改变量值就不需要修改代码，直接修改属性文件就可以了。这样方便管理和维护。</p>

<p>Spring可以很轻松地通过Annotation的方式注入属性值，以下记录下学习的过程。</p>

<h2>配置</h2>

<p><strong>1. 新建属性文件</strong></p>

<p>如<code>application.properties</code></p>

<p>里面的格式为： <code>name=value</code></p>

<p>如：</p>

<pre><code>token=wodinow
</code></pre>

<p><strong>2. 配置属性文件路径</strong></p>

<pre><code>&lt;context:property-placeholder location="classpath:application.properties" /&gt;
</code></pre>

<hr />

<h2>使用注解注入</h2>

<p>在一个Bean中， 使用@Value注解使用${name}格式，如在@Controller中</p>

<pre><code>@Controller
public class CoreController {   

    @Value("${developer_id}")
    private String developerID;

    }
</code></pre>

<h2>为静态变量注入</h2>

<p>Spring不能为静态变量注入属性值，但我们可以配置一个setter完成此项工作，如：</p>

<pre><code>@Component
public class SignUtil {  

    //需要从属性文件中读值的静态变量
    private static  String TOKEN;  

    //配置一个setter, 为该静态变量赋值
    @Value("${token}")
    private void setTOKEN(String token) {
        SignUtil.TOKEN = token;
    }  
｝
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过VM参数选择本地log4j配置文件]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/30/log4j-configuration-via-jvm-argument/"/>
    <updated>2014-11-30T02:32:58+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/30/log4j-configuration-via-jvm-argument</id>
    <content type="html"><![CDATA[<p>有时候我们项目的log4j配置文件配置的是生产环境，每次本地调试又不想改会本地的调试配置，就可以通过JVM参数去修改此路径。</p>

<p>在项目的参数中加入：</p>

<pre><code>-Dlog4j.configuration=file:log4j配置文件路径
</code></pre>

<p>注：路径需要以file:开头，如：</p>

<pre><code>-Dlog4j.configuration=file:E:\Programming\debug_log4j.properties
</code></pre>

<p>即可在本地运行时选择本地的配置文件进行日志配置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在windows上使用_netrc文件让Git记住用户名和密码]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/28/use-netrc-file-to-save-user-name-and-password/"/>
    <updated>2014-11-28T16:58:21+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/28/use-netrc-file-to-save-user-name-and-password</id>
    <content type="html"><![CDATA[<p>每次写octopress博客的git push 和 rake deploy 都要问一次用户名密码，真的非常烦。以下是一个简单的方法让git记住用户名和密码：</p>

<ul>
<li>定义一个用户环境变量%HOME%， value=%USERPROFILE%。（windows会把路径自动替换为用户路径）</li>
<li>在%HOME%路径下新建一个文件<code>_netrc</code></li>
<li><p>在<code>_netrc</code>文件中增加下面的配置：</p>

<p>  machine <hostname1>
  login <login1>
  password <password1>
  machine <hostname2>
  login <login2>
  password <password2></p></li>
</ul>


<p>如：</p>

<pre><code>machine github.com
login cnblogs_user
password cnblogs_pwd
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven 配置 BAE SDK]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/25/bae-maven-setup/"/>
    <updated>2014-11-25T23:38:51+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/25/bae-maven-setup</id>
    <content type="html"><![CDATA[<p>百度BAE的官方文档没有一个完整的使用Maven配置BAE SDK的例子，而<a href="http://godbae.duapp.com/?p=366">BAE官方博客</a>上的配置也不可用。</p>

<p>经过多日的调试和BAE客服的交流，最后成功配置出了一个maven 配置的 pom.xml文件。今天决定分享一下，可能是现在网上能搜到的第一篇可用的配置步骤了。</p>

<p>1.建立Maven项目</p>

<p>2.下载BAE SDK 这里使用的是<a href="http://bcs.duapp.com/baev3-sdk/java-runtime/baev3-sdk-1.0.0.zip">baev3-sdk-1.0.1</a>（下载还是必须的）</p>

<p>3.添加如下repository 到pom.xml中</p>

<pre><code>&lt;repositories&gt;
   &lt;repository&gt;
        &lt;id&gt;bae&lt;/id&gt;
        &lt;url&gt;http://maven.duapp.com/nexus/content/groups/public/&lt;/url&gt;
        &lt;releases&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;/releases&gt;
   &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre>

<p>4.添加依赖包：</p>

<pre><code>    &lt;!-- ===================bae=============================== --&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;3.8.1&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.baidu.bae&lt;/groupId&gt;
        &lt;artifactId&gt;baev3-sdk&lt;/artifactId&gt;
        &lt;version&gt;1.0.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.baidu&lt;/groupId&gt;
        &lt;artifactId&gt;mcpack&lt;/artifactId&gt;
        &lt;version&gt;1.0.9&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.thrift&lt;/groupId&gt;
        &lt;artifactId&gt;libthrift&lt;/artifactId&gt;
        &lt;version&gt;0.9.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
        &lt;artifactId&gt;gson&lt;/artifactId&gt;
        &lt;version&gt;2.2.2&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;net.sf.ezmorph&lt;/groupId&gt;
        &lt;artifactId&gt;ezmorph&lt;/artifactId&gt;
        &lt;version&gt;1.0.6&lt;/version&gt;
    &lt;/dependency&gt;

     &lt;dependency&gt;
        &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt;
        &lt;artifactId&gt;json-lib&lt;/artifactId&gt;
        &lt;version&gt;2.4&lt;/version&gt;
        &lt;classifier&gt;jdk15&lt;/classifier&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;
        &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;
        &lt;version&gt;1.8.0&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
        &lt;artifactId&gt;httpmime&lt;/artifactId&gt;
        &lt;version&gt;4.2&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
        &lt;artifactId&gt;httpcore&lt;/artifactId&gt;
        &lt;version&gt;4.2&lt;/version&gt;
        &lt;type&gt;jar&lt;/type&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;
        &lt;artifactId&gt;httpclient&lt;/artifactId&gt;
        &lt;version&gt;4.2.5&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;commons-codec&lt;/groupId&gt;
        &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;
        &lt;version&gt;1.6&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;commons-io&lt;/groupId&gt;
        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
        &lt;version&gt;1.4&lt;/version&gt;
    &lt;/dependency&gt; 

    &lt;dependency&gt;
        &lt;groupId&gt;commons-lang&lt;/groupId&gt;
        &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;
        &lt;version&gt;2.5&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
        &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
        &lt;version&gt;3.1&lt;/version&gt;
    &lt;/dependency&gt;   

    &lt;!-- Log4j --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;version&gt;1.2.17&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;
        &lt;version&gt;1.7.5&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;
        &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;
        &lt;version&gt;1.7.5&lt;/version&gt;
    &lt;/dependency&gt;   
</code></pre>

<p>5.到这一步，你可能会发现如下错误：</p>

<pre><code>Missing artifact com.baidu:mcpack:jar:1.0.0.9
</code></pre>

<p>这时候，去到下载的BAE SDK下载的dependencies目录下，找到<code>mcpack-1.0.0.9.jar</code></p>

<p>在cmd命令行中使用如下命令（需要配置好maven的环境变量）：</p>

<pre><code>mvn install:install-file -Dfile=下载路径\baev3-sdk-1.0.1\dependencies\mcpack-1.0.0.9.jar -DgroupId=com.baidu -DartifactId=mcpack -Dversion=1.0.9 -Dpackaging=jar
</code></pre>

<p><img src="http://Jaskey.github.io/images/bae/install_mcpack.jpg" title="安装mcpack到本地路径" alt="安装mcpack到本地路径" /></p>

<p>然后去本地repo下查看是否存在此依赖包（默认在window用户目录下.m2）去查看本地安装的mcpack包。</p>

<p><img src="http://Jaskey.github.io/images/bae/repo_mcpack.jpg" title="查看mcpack是否安装成功" alt="查看mcpack是否安装成功" /></p>

<p>6.更新maven 项目，应该就可以了。</p>

<h2>测试分布式日志</h2>

<p>在<code>log4j.properties</code>中加入如下类似配置：</p>

<pre><code>log4j.rootLogger=DEBUG,BAE
##################分布式日志###############
log4j.appender.BAE=com.baidu.bae.api.log.BaeLogAppender
log4j.appender.BAE.ak=BAE的API KEY
log4j.appender.BAE.sk=BAE的的Secrete Key
log4j.appender.BAE.Threshold = DEBUG
log4j.appender.BAE.layout=org.apache.log4j.SimpleLayout
</code></pre>

<p>maven install 并发布。在扩展服务中测试分布式日志</p>

<p><img src="http://Jaskey.github.io/images/bae/BAE_distrubuted_logs.jpg" alt="测试分布式日志" /></p>

<p>如果能看到日志打印成功，则证明BAE的SDK配置成功了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Push Error: RPC Failed; Result=22, HTTP Code = 411 解决方案]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/23/git-push-fails-rpc-failed-result-equals-22-http-code-equals-411/"/>
    <updated>2014-11-23T23:10:43+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/23/git-push-fails-rpc-failed-result-equals-22-http-code-equals-411</id>
    <content type="html"><![CDATA[<p>有时候git push 会报类似的错误，如在BAE上push一个项目较大的时候，可能就会报此错误。由于遇到很多次，今天记录下解决方法：</p>

<p>默认情况下，Git设置了HTTP操作的最大值为一MB，所以当你push代码的时候如果超过这个值，则可能发生错误。</p>

<p>解决方法如下：</p>

<ol>
<li>进入git 目录</li>
<li><p>扩大允许的最大值：</p>

<pre><code> git config http.postBuffer *bytes*
</code></pre></li>
</ol>


<p>如：扩大到500MB:</p>

<pre><code>    git config http.postBuffer 524288000
</code></pre>

<p>再次push，问题应该就解决了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stateless的web架构]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/10/stateful-vs-stateless/"/>
    <updated>2014-11-10T21:26:13+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/10/stateful-vs-stateless</id>
    <content type="html"><![CDATA[<h2>分布式架构中用户状态的问题</h2>

<p>传统的web架构中，我们通常会用使用session保存用户的当前状态用以标记一个用户，例如用户在不同的请求中都能找到他的购物车中的物品。</p>

<p>但随着用户量的增长，无法避免的，我们需要使用使用分布式的系统。而在分布式场景，问题将会变得复杂起来。</p>

<p>例如，现在有三台应用服务器A,B,C。第一次用户的请求被负载均衡器路由到了A服务器，相关的状态被保存了起来，那么下次一个请求过来的时候，假如负载均衡器把他的请求路由到了B上，所有的已有状态都将丢失。就好像你刚刚在购物车上抢到了一台小米手机，准备付款的时候发现购物车居然是空的！这是我们需要急切避免的问题！</p>

<h2>Sticky Session</h2>

<p>要解决这种场景，如果我们使用原来的架构，就必须更改负载均衡器的策略，可使用一个sticky session 的策略。</p>

<p>即同一个用户的请求都转发到同一台的服务器，这样，session就不用丢失。服务器依旧可以在session中找到用户的相关信息。负载均衡器可以在查看HTTP头中的Cookies（我们设置用户的标识到其中）去判断应该路由到哪台具体的服务器上，以便获取到local session。</p>

<p>用sticky session解决这类问题有两个较为明显的<strong>好处</strong>：</p>

<ol>
<li>所有的应用代码都不需要修改，本来单机使用session的，分布式环境依旧可以使用。</li>
<li>有利于命中本机的RAM缓存，例如可以有效的存储某些用户的静态信息在本机，下次有效的使用缓存增加响应速度</li>
</ol>


<p>但是，sticky session 有如下<strong>坏处</strong>：</p>

<ol>
<li>如果一台服务器宕机，该服务器上的session就会丢失（这是local session的通病）。这对于状态敏感的应用，如购物车，是极大的问题。</li>
<li>由于负载均衡器使用了sticky,这可能导致负载很不均衡。</li>
<li>如果负载过重，希望横向扩展，不能即时的收到效果。因为原来的用户的所有存有session的请求都会路由到原来的服务器。</li>
</ol>


<h2>Stateless Archetecture</h2>

<p>可见，sticky session 很难解决用户状态不丢失的问题，那么要避免sticky session缺点而又解决这类的用户状态的问题，现在流行的架构是无状态的（stateless），也就是说，不使用session，server端不保留用户的任何状态。</p>

<p>一旦我们把应用做成无状态的，有很多好处</p>

<p>1 . 最明显的就是易于横向扩展！服务器不需要维护用户的状态，所以每一台服务器去处理用户的请求，都是一样的。负载均衡器可以使用最简单最优的策略，如随机/轮询等策略负载到具体的应用服务器上。</p>

<p>2 . 即便应用服务器宕机，也不会丢失用户状态，因为状态没有保存在该机上。而当需要增加机器已处理大量用户请求，由于无状态，可以让新的机器快速的拥有一定负载(load)。</p>

<p>严格意义上说，无状态的架构应该是指整个server不保存客户端操作的状态（client state），也叫应用状态（application state），这不包括资源的状态（resource state），资源状态是必须保存的，例如用户曾经购买过的商品等等这些需要持久化的状态。</p>

<p>但实际上，用户操作的过程必然是有状态的，例如你浏览微博的时候，浏览到第二页，那么下一页就是第三页，这个浏览到的当前页面，就是用户的操作状态，我们希望的这个状态不由server去保存，而把状态转移出去。</p>

<p>应用服务器前接客户端，后接数据库。所以我们可以把状态转移到这两者之一。</p>

<p>1 .转移到client</p>

<p>这是真正的无状态，整个server保存任何客户操作状态，而是由客户端自己维持，这也是REST的约束之一。例如，用户在第二页的时候，下一页对应的请求和在第三页的时候的下一页请求是不一样的，这由客户端自己处理并发送请求，服务端只需要接受参数就足够知道要做什么样的操作，不需要访问任何服务端保存的用户状态。例如我们可以把用户的相关状态通过cookie设置在HTTP Response，这样应用服务器获取状态的责任就转移到客户端本身。例如标识一个用户ID（加密的hash串）之类的，可以设置到cookie中，但这仅限于某些不敏感的状态。而且，cookie中能设置的数据大小也很有限。</p>

<p>2 .转移到数据库（分布式缓存）中。</p>

<p>另外一个更为可取的方法是使用数据库或者分布式缓存（如memcache）存储用户的状态，需要注意的这不算是无状态的架构，而顶多只能算web server的无状态，这样无状态的服务器依旧可以使用可靠的方式获取到用户的状态而做出合理的逻辑处理，并且session不依赖于单一机器，所以即便出现机器宕机，也不会丢失用户状态。</p>
]]></content>
  </entry>
  
</feed>
