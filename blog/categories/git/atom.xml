<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | 薛定谔的风口猪]]></title>
  <link href="http://Jaskey.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://Jaskey.github.io/"/>
  <updated>2016-02-10T18:21:35+08:00</updated>
  <id>http://Jaskey.github.io/</id>
  <author>
    <name><![CDATA[Jaskey Lam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git中只merge部分commit]]></title>
    <link href="http://Jaskey.github.io/blog/2015/12/22/git-cherry-pick/"/>
    <updated>2015-12-22T16:12:38+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/12/22/git-cherry-pick</id>
    <content type="html"><![CDATA[<h2>cherry-pick</h2>

<p>在Git 1.7.2以上的版本引入了一个 cheery-pick的命令可以只merge 部分的commit而不用直接把整个分支merge过来</p>

<pre><code>git cherry-pick &lt;commit 号&gt;
</code></pre>

<p>如：</p>

<pre><code>git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf
</code></pre>

<p>这样就只会把这个<code>e43a6fd3e94888d76779ad79fb568ed180e5fcdf</code> commit的内容pull到当前的分支，不过你会得到一个新的commit。
这样就可以按需merge需要的commit,而不需要的就可以直接废弃咯。</p>

<h3>多个commit:</h3>

<p>可以用空格指定多个commit:</p>

<pre><code>git cherry-pick A B C D E F
</code></pre>

<!--more-->


<h2>范围merge:</h2>

<p><code>cherry-pick</code>可以范围merge ,使用 两次版本间使用<code>..</code>连起来：</p>

<pre><code>cherry-pick A..B
</code></pre>

<p>这样会把从从版本A（不包含）到B（包含）即（A，B]的版本pull到当前分支</p>

<p>甚至，可以使用多段，同样使用空格隔开：</p>

<pre><code>git cherry-pick A..B C..D E..F
</code></pre>

<p>注：中间需要自己解决冲突，若出现冲突，可以尝试使用 <code>git mergetool</code> 使用GUI工具解决</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Untrace .gitignore中已经被commit的文件]]></title>
    <link href="http://Jaskey.github.io/blog/2014/12/03/ignore-files-that-have-already-been-committed/"/>
    <updated>2014-12-03T11:35:01+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/12/03/ignore-files-that-have-already-been-committed</id>
    <content type="html"><![CDATA[<p>很可能在添加忽略文件到.gitignore之前，你已经commit过那些文件，如何把这些提交了的文件忽略并且不在本地删除这些文件，让<code>.gitignore</code>生效，以下是步骤</p>

<ol>
<li>确保你现在branch上的重要文件已经commit.</li>
<li><p>在项目根路径运行：</p>

<pre><code> git rm -r --cached .
</code></pre></li>
<li><p>然后从staging area中移除所有已经改变的文件:</p>

<pre><code> git add .
</code></pre></li>
<li><p>最后再提交即可</p>

<pre><code> git commit -m ".gitignore is working, fixed untracked files"
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在windows上使用_netrc文件让Git记住用户名和密码]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/28/use-netrc-file-to-save-user-name-and-password/"/>
    <updated>2014-11-28T16:58:21+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/28/use-netrc-file-to-save-user-name-and-password</id>
    <content type="html"><![CDATA[<p>每次写octopress博客的git push 和 rake deploy 都要问一次用户名密码，真的非常烦。以下是一个简单的方法让git记住用户名和密码：</p>

<ul>
<li>定义一个用户环境变量%HOME%， value=%USERPROFILE%。（windows会把路径自动替换为用户路径）</li>
<li>在%HOME%路径下新建一个文件<code>_netrc</code></li>
<li><p>在<code>_netrc</code>文件中增加下面的配置：</p>

<p>  machine <hostname1>
  login <login1>
  password <password1>
  machine <hostname2>
  login <login2>
  password <password2></p></li>
</ul>


<p>如：</p>

<pre><code>machine github.com
login cnblogs_user
password cnblogs_pwd
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Push Error: RPC Failed; Result=22, HTTP Code = 411 解决方案]]></title>
    <link href="http://Jaskey.github.io/blog/2014/11/23/git-push-fails-rpc-failed-result-equals-22-http-code-equals-411/"/>
    <updated>2014-11-23T23:10:43+08:00</updated>
    <id>http://Jaskey.github.io/blog/2014/11/23/git-push-fails-rpc-failed-result-equals-22-http-code-equals-411</id>
    <content type="html"><![CDATA[<p>有时候git push 会报类似的错误，如在BAE上push一个项目较大的时候，可能就会报此错误。由于遇到很多次，今天记录下解决方法：</p>

<p>默认情况下，Git设置了HTTP操作的最大值为一MB，所以当你push代码的时候如果超过这个值，则可能发生错误。</p>

<p>解决方法如下：</p>

<ol>
<li>进入git 目录</li>
<li><p>扩大允许的最大值：</p>

<pre><code> git config http.postBuffer *bytes*
</code></pre></li>
</ol>


<p>如：扩大到500MB:</p>

<pre><code>    git config http.postBuffer 524288000
</code></pre>

<p>再次push，问题应该就解决了。</p>
]]></content>
  </entry>
  
</feed>
