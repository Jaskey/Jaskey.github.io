<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | 薛定谔的风口猪]]></title>
  <link href="http://Jaskey.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://Jaskey.github.io/"/>
  <updated>2016-05-12T00:43:10+08:00</updated>
  <id>http://Jaskey.github.io/</id>
  <author>
    <name><![CDATA[Jaskey Lam]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript实现私有方法]]></title>
    <link href="http://Jaskey.github.io/blog/2015/03/04/js-private-methods/"/>
    <updated>2015-03-04T15:06:11+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/03/04/js-private-methods</id>
    <content type="html"><![CDATA[<p>JavaScript的所有成员（属性+方法）都是公有的，但是我们有方法模拟出类似于OOP一样的私有方法。</p>

<p>以下使用例子<code>Person</code>，假如我们需要一个<code>toStr</code>的私有方法，只能在Person内部才能访问。
其中<code>printInfo</code>方法为公有，将使用到<code>toStr</code>方法和其他私有方法。</p>

<h2>1.在构造函数中定义私有方法</h2>

<pre><code>//构造函数
function Person(name,age){
    this.name = name;
    this.age = age;

    //直接在constructor中定义私有方法
    function privateMethod(){
        console.log("in private method");
    }
    //使用var在构造函数定义私有方法
    var toStr = function(){
        return this.name + ' is ' + this.age;
    }

    //公有方法
    this.printInfo = function(){
        console.log(toStr());
        privateMethod();
    }
}
//test case
var p = new Person('Jaskey',24);
p.printInfo();//两个私有方法能访问，但是toStr字段访问有问题.本机测试显示：  is undefined
p.toStr();//p.toStr is not a function
</code></pre>

<p>以上方法，我们的确构造了两个私有的方法<code>toStr</code>和<code>privateMethod</code>且在外部不能访问而内部可以访问。</p>

<p>但从打印的结果显示<code>toStr</code>并不能正确的访问到<code>Person</code>对象中的<code>name</code>和<code>age</code>。<strong>原因是当<code>printInfo</code>方法调用<code>toStr</code>时，<code>toStr</code>被当成了函数调用，所以<code>this</code>的scope被绑定到了全局（浏览器中即window）。</strong></p>

<p>要解决这个问题，我们必须要让<code>toStr</code>调用时，<code>this</code>绑定到<code>Person</code>的对象中，所以调用<code>toStr</code>时，可使用<code>call</code>或者<code>apply</code>方法调用。如：<code>toStr.call(this)</code>。</p>

<p>修改版本：</p>

<pre><code>function Person(name,age){
    this.name = name;
    this.age = age;

    //直接在constructor中定义私有函数
    function privateMethod(){
        console.log("in private method");
    }
    //使用var定义私有函数
    var toStr = function(){
        return this.name + ' is ' + this.age;
    }

    this.printInfo = function(){
        console.log(toStr.call(this));//把this绑定到当前的对象
        privateMethod.call(this);//为了统一，把privateMethod的this都绑定到正确的scope
    }
}
</code></pre>

<h3>问题：</h3>

<p>使用这种在构造函数中定义私有方法的方式，有两个问题：</p>

<p>1.构造函数中的私有方法并不属于prototype，所以prototype的方法不可以访问这样的方法：</p>

<pre><code>Person.prototype.myPublicMethod=function(){
    toStr();//toStr is not defined
}
</code></pre>

<p>2.内存消耗。每一次new一个<code>Person</code>对象时,每个函数都会重新创建一份,而我们更希望是share同一个函数对象。</p>

<h2>2.使用Module Pattern实现</h2>

<p><em>Douglas Crockford</em> 有一个模式叫<strong>“Module Pattern”</strong>, 可以使用闭包的方法解决实现私有方法的问题，并且可读性非常高。</p>

<p>使用这个方法，我们自己构造一个Person的原型对象，利用一个闭包，则让其能访问外部的私有方法。</p>

<p>同理，由于需要绑定正确的this作用域，我们使用<code>call</code>方法调用</p>

<pre><code>//构建一个原型对象
Person.prototype = (function(){
    /******私有方法定义*****/

    //通过var定义
    var toStr = function(){
        return this.name + " is " + this.age
    }

    //直接定义
    function privateMethod(){
        console.log("in private method");
    }


    return {//返回的这个函数会返回一个原型对象
        constructor:Person,//把原型的constructor属性设置到正确的构造函数

        /*******公有方法*******/
        printInfo:function(){
            console.log("printing info:",toStr.call(this));
        },

        publicMethod:function(){
            privateMethod.call(this);
        }
    }

})();//注意这里的括号表示立刻执行此匿名函数，返回原型对象


//test case
var p = new Person('Jaskey',24);
p.printInfo();//printing info: Jaskey is 24
p.publicMethod();// in private method
p.toStr();//"undefined is not a function"
</code></pre>

<p>通过返回一个新的原型对象，该原型对象可以访问到私有的方法，而且可读性非常高,私有的方法放到原型外面，原型里面的方法都是公有方法。</p>

<h2>定义一个调用方法以正确this调用所有私有方法</h2>

<p>像这样每次的私有方法调用，都需要重新绑定this的scope，非常繁琐。能不能把这个操作封装起来呢？
答案是有的，我们可以定义一个<code>_</code>方法，该方法接受一个函数指针，然后返回另外一个this绑定到当前对象的函数，以便正确调用:</p>

<pre><code>    //返回一个函数，该函数的this绑定到当前对象
    _:function(fun){
        var that = this;//保存当前对象作用域
        return function(){//返回一个函数，该函数会调用目标函数，但this绑定到that作用域
            return fun.apply(that,arguments);//记得return
        }
    }
</code></pre>

<p>以第二个闭包的方法为例，最后的<code>Person</code>版本如下:</p>

<pre><code>function Person(name,age){
    this.name = name;
    this.age = age;    
}


Person.prototype = (function(){
/******私有方法定义*****/
    var toStr = function(){
        return this.name + " is " + this.age;
    }

function privateMethod(param){
    console.log("in privateMethod param = ",param);
    this.publicMethod2();
}

return {//返回一个原型对象
    constructor:Person,//把原型的constructor属性设置到正确的构造函数

    /*******公有方法*******/
    printInfo:function(){
        console.log("-------printing info-------");
        console.log("printing info:",this._(toStr));
        this._(privateMethod)('param from printInfo')
        console.log("-------end of printing info-------");
    },

    publicMethod:function(){
        console.log("-------public Method-------");
        this._(privateMethod)('param from pubicMethod');
        console.log("-------end of Public Method-------");
    },
    publicMethod2:function(){
        console.log('in publicMethod2');
    },

    //返回一个函数，该函数的this绑定到当前对象
    _:function(fun){
        var that = this;
        return function(){
            return fun.apply(that,arguments);//注意return
        }
    }
}

})();//立刻执行

//test case:
var p = new Person('Jaskey',24);
p.printInfo();
p.publicMethod();
//p._(toStr)();//toStr is not defined
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript中返回函数]]></title>
    <link href="http://Jaskey.github.io/blog/2015/02/02/javascript_function%20closure/"/>
    <updated>2015-02-02T18:20:05+08:00</updated>
    <id>http://Jaskey.github.io/blog/2015/02/02/javascript_function closure</id>
    <content type="html"><![CDATA[<p>最近学习JavaScript,遇到了函数闭包的相关问题，由于这是Java没有的概念，认知上容易糊涂。到底</p>

<pre><code>function a(){
    function b(){
        alert('b');
      } 
        return b;//没有括号
} 
</code></pre>

<p>和</p>

<pre><code>function a(){
    function b(){
        alert('b');
    }
        return b();//多一个括号
}
</code></pre>

<p>有何区别呢？ 在Java中，我们是不能返回一个函数的，也不能为一个对象的属性赋值为函数，但这在Javascript中都可以。以上两种的函数都是正确的，但却表达着完全一样的意义。</p>

<p>第一种方式返回时候不带括号，return函数的名称时，<strong>返回的其实是一个函数b的引用</strong>，即<code>function a</code> 返回的结果是<code>function b</code>的引用。</p>

<p>而第二种方式带着括号，其实是返回b的执行结果。而b本身不返回东西，所以<code>return undefined</code>。</p>

<p>请观察以下几个demo：</p>

<pre><code>function a() {
    alert('A');
}
//alerts 'A', returns undefined

function b() {
    alert('B');
    return a;
}
//alerts 'B', returns function a

function c() {
    alert('C');
    return a();
}
//alerts 'C', alerts 'A', returns undefined

alert("Function 'a' returns " + a());
alert("Function 'b' returns " + b());//特别留意这里，b()返回的是整一个函数。
alert("Function 'c' returns " + c());//这里是返回a()的结果，所以会先alert('A'),再返回underfined
</code></pre>

<p>加上参数以便更加理解这一例子：</p>

<pre><code>function a(who) {
    alert('a say hello to '+ who);
}
//alerts 'A', returns undefined

function b(who) {
    alert('b say hello to '+ who);
    return a;
}
//alerts 'B', returns function a

function c(who) {
    alert('c say hello to '+ who);
    return a(who);
}
//alerts 'C', alerts 'A', returns undefined

alert("Function 'a' returns " + a("junjie"));//return undefined
alert("Function 'b' returns " + b("junjie"));//返回整个函数a的定义
alert("Function 'c' returns " + c('junjie'));//先调用了a(who)，所以alert 了"a say hello to junjie"，再返回undefined，因为a本身不返回值
</code></pre>
]]></content>
  </entry>
  
</feed>
